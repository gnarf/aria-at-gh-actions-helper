# Manual trigger only
trigger: none

variables:
  - name: empty
    value: ''
  - name: helper_dir
    value: '$(Agent.BuildDirectory)/helper'
  - name: aria_at_automation_driver_version
    value: 'v0.0.1-beta'

parameters:
- name: aria_at_ref
  default: master
- name: browser
  default: chrome
- name: macos_version
  default: '14'
- name: test_pattern
  default: '{reference/**,test-*-nvda.*}'
- name: work_dir
  default: 'tests/alert'
- name: callback_header
  default: $(empty)
- name: callback_url
  default: $(empty)
- name: status_url
  default: $(empty)

pool:
  vmImage: macos-14


resources:
  repositories:
    - repository: aria-at
      type: github
      endpoint: MyGitHubServiceConnection
      name: w3c/aria-at
      fetchDepth: 0
      ref: master
    - repository: aria-at-automation-harness
      type: github
      endpoint: MyGitHubServiceConnection
      name: w3c/aria-at-automation-harness
      ref: main


# Tasks documentation
# https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/?view=azure-pipelines&viewFallbackFrom=azure-devops
# Conditionals documentation
# https://learn.microsoft.com/en-us/azure/devops/pipelines/process/conditions?view=azure-devops&tabs=yaml
# Expressions / Functions
# https://learn.microsoft.com/en-us/azure/devops/pipelines/process/expressions?view=azure-devops
steps:
# Method borrowed from https://stackoverflow.com/a/63959970
- task: Bash@3
  displayName: Setup env vars
  env:
    p_work_dir: ${{ parameters['work_dir'] }}
    p_test_pattern: ${{ parameters['test_pattern'] }}
    p_callback_url: ${{ parameters['callback_url'] }}
    p_status_url: ${{ parameters['status_url'] }}
    p_callback_header: ${{ parameters['callback_header'] }}
    p_browser: ${{ parameters['browser'] }}
    p_macos_version: ${{ parameters['macos_version'] }}
    p_azure_logs_url: $(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)
  inputs:
    targetType: inline
    script: |
      echo "Making inputs available as an environment variable."
      echo "##vso[task.setvariable variable=ARIA_AT_WORK_DIR;]$p_work_dir"
      echo "##vso[task.setvariable variable=ARIA_AT_TEST_PATTERN;]$p_test_pattern"
      echo "##vso[task.setvariable variable=ARIA_AT_CALLBACK_URL;]$p_callback_url"
      echo "##vso[task.setvariable variable=ARIA_AT_STATUS_URL;]$p_status_url"
      echo "##vso[task.setvariable variable=ARIA_AT_CALLBACK_HEADER;]$p_callback_header"
      echo "##vso[task.setvariable variable=BROWSER;]$p_browser"
      echo "##vso[task.setvariable variable=MACOS_VERSION;]$p_macos_version"
      echo "##vso[task.setvariable variable=AZURE_LOGS_URL;]$p_azure_logs_url"

- task: Bash@3
  displayName: DEBUG-Say Something
  inputs:
    targetType: inline
    script: 'say "I wonder if say timing is normal"'

- task: UseNode@1
  displayName: Install Node
  inputs:
    version: '20.x'


# Checkouts section
- checkout: self
  path: helper
  displayName: Checkout aria-at-gh-actions-helper

# we need the helper to log this, so do it right after helper checkout
- task: Bash@3
  displayName: Log job state QUEUED
  condition: ${{ ne(parameters['status_url'], '$(empty)') }}
  inputs:
    targetType: inline
    workingDirectory: $(helper_dir)
    script: |
      ./report-status-azure.sh QUEUED "\"work_dir\": \"${ARIA_AT_WORK_DIR}\","

- checkout: aria-at-automation-harness
  path: helper/aria-at-automation-harness
  displayName: Checkout aria-at-automation-harness
- checkout: aria-at
  fetchDepth: 0
  path: helper/aria-at
  displayName: Checkout aria-at
- task: Bash@3
  displayName: Checkout aria-at to ${{ parameters['aria_at_ref'] }}
  inputs:
    targetType: 'inline'
    workingDirectory: $(helper_dir)/aria-at
    script: git checkout ${{ parameters['aria_at_ref'] }}


- task: DownloadGitHubRelease@0
  displayName: Download aria-at-automation-driver $(aria_at_automation_driver_version)
  # https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/download-github-release-v0?view=azure-pipelines
  inputs:
    connection: MyGitHubServiceConnection
    userRepository: w3c/aria-at-automation-driver
    defaultVersionType: specificTag
    version: $(aria_at_automation_driver_version)
    downloadPath: $(helper_dir)/aria-at-automation-driver

- task: Bash@3
  displayName: Install automation-driver
  inputs:
    targetType: 'inline'
    workingDirectory: $(helper_dir)/aria-at-automation-driver
    script: |
      tar zvxf *.tar.gz
      cd package
      npm install
      DEBUG=* ./bin/at-driver install --unattended

- task: Bash@3
  displayName: Install geckodriver
  condition: ${{ eq( parameters['browser'], 'firefox' ) }}
  inputs:
    targetType: 'inline'
    workingDirectory: $(helper_dir)
    script: |
      mkdir geckodriver
      ln -s $(which geckodriver) geckodriver/geckodriver
      ls -al geckodriver

- task: Npm@1
  displayName: 'aria-at: npm install'
  inputs:
    workingDir: $(helper_dir)/aria-at
    command: 'install'
- task: Npm@1
  displayName: 'aria-at: npm build'
  inputs:
    workingDir: $(helper_dir)/aria-at
    command: 'custom'
    customCommand: 'run build'
- task: Npm@1
  displayName: 'aria-at-automation-harness: npm install'
  inputs:
    workingDir: $(helper_dir)/aria-at-automation-harness
    command: 'install'
- task: Bash@3
  displayName: DEBUG-Say Something
  inputs:
    targetType: inline
    script: 'say "I wonder if say timing is normal"'

- task: Bash@3
  displayName: Wait for automation-driver server
  inputs:
    targetType: 'inline'
    workingDirectory: $(helper_dir)/aria-at-automation-driver/package
    script: |
      ../../wait-for-server.sh


- task: Bash@3
  displayName: 'Start VoiceOver'
  inputs:
    targetType: inline
    script: "/System/Library/CoreServices/VoiceOver.app/Contents/MacOS/VoiceOverStarter"

  # This feature must be enabled in order for the harness to inspect the
  # the page (AppleScript is used for this purpose instead of
  # SafariDriver because SafariDriver implements a "glass pane" which
  # rejects the kinds of interactions--namely, key presses--that ARIA-AT
  # tests must simulate).
  # https://stackoverflow.com/questions/37802673/allow-javascript-from-apple-events-in-safari-through-terminal-mac
- task: Bash@3
  displayName: 'Configure Safari to Allow JavaScript from Apple Events'
  inputs:
    targetType: inline
    script: defaults write -app Safari AllowJavaScriptFromAppleEvents 1

  # Ensure that VoiceOver doesn't automatically read through the entirety of
  # a webpage when its loaded and there isn't immediate keyboard interaction.
  # This is turned on by default for some versions of MacOS
  # https://support.apple.com/guide/voiceover/general-cpvouwebpageloading/mac
- task: Bash@3
  displayName: 'Configure VoiceOver not to "Automatically Speak Web Page"'
  inputs:
    targetType: inline
    script: defaults write com.apple.VoiceOver4/default SCRCUserDefaultsAutomaticallySpeakWebPage 0
- task: Bash@3
  displayName: DEBUG-Say Something
  inputs:
    targetType: inline
    script: 'say "I wonder if say timing is normal"'


- task: Bash@3
  displayName: Log job state RUNNING
  # weird syntaxing because parameters only exists in ${{ }} land, but succeeded() doesn't exist there
  condition: and(succeeded(), ${{ ne(parameters['status_url'], '$(empty)') }} )
  inputs:
    targetType: inline
    workingDirectory: $(helper_dir)
    script: |
      ./report-status-azure.sh RUNNING "\"work_dir\": \"${ARIA_AT_WORK_DIR}\","

- task: Bash@3
  displayName: Run harness
  inputs:
    targetType: inline
    workingDirectory: $(helper_dir)
    script: |
      ./run-tester.sh

- task: Bash@3
  displayName: Log job state ERROR
  # weird syntaxing because parameters only exists in ${{ }} land, but failed() doesn't exist there
  condition: and(failed(), ${{ ne(parameters['status_url'], '$(empty)') }} )
  inputs:
    targetType: inline
    workingDirectory: $(helper_dir)
    script: |
      ./report-status-azure.sh ERROR "\"work_dir\": \"${ARIA_AT_WORK_DIR}\","
- task: Bash@3
  displayName: Log job state COMPLETED
  # weird syntaxing because parameters only exists in ${{ }} land, but succeeded() doesn't exist there
  condition: and(succeeded(), ${{ ne(parameters['status_url'], '$(empty)') }} )
  inputs:
    targetType: inline
    workingDirectory: $(helper_dir)
    script: |
      ./report-status-azure.sh COMPLETED "\"work_dir\": \"${ARIA_AT_WORK_DIR}\","

- task: PublishPipelineArtifact@1
  displayName: Publish logs
  # always run
  condition: or(failed(), succeeded())
  inputs:
    targetPath: $(helper_dir)
    artifact: logs
