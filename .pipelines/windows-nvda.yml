# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main
- gnarf

pool:
  vmImage: windows-latest

variables:
- name: aria_at_ref
  value: master
- name: browser
  value: chrome
- name: nvda_version
  value: 'latest'
- name: test_pattern
  value: '{reference/**,test-*-nvda.*}'
- name: work_dir
  value: 'tests/alert'
- name: callback_header
  value: ''
- name: callback_url
  value: ''
- name: status_url
  value: ''

resources:
  repositories:
    - repository: nvda-at-automation
      type: github
      endpoint: MyGitHubServiceConnection
      name: Prime-Access-Consulting/nvda-at-automation
      ref: master
    - repository: aria-at
      type: github
      endpoint: MyGitHubServiceConnection
      name: w3c/aria-at
      ref: '$( variables.aria_at_ref )'
    - repository: aria-at-automation-harness
      type: github
      endpoint: MyGitHubServiceConnection
      name: w3c/aria-at-automation-harness
      ref: main


# Tasks documentation
# https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/?view=azure-pipelines&viewFallbackFrom=azure-devops
# Conditionals documentation
# https://learn.microsoft.com/en-us/azure/devops/pipelines/process/conditions?view=azure-devops&tabs=yaml
# Expressions / Functions
# https://learn.microsoft.com/en-us/azure/devops/pipelines/process/expressions?view=azure-devops
steps:
# Method borrowed from https://stackoverflow.com/a/63959970
- task: PowerShell@2
  displayName: Setup env vars
  inputs:
    targetType: inline
    script: |
      Write-Host "Making inputs available as an environment variable."
      Write-Host "##vso[task.setvariable variable=ARIA_AT_WORK_DIR;]$(variables.work_dir)"
      Write-Host "##vso[task.setvariable variable=ARIA_AT_TEST_PATTERN;]$(variables.test_pattern)"
      Write-Host "##vso[task.setvariable variable=ARIA_AT_CALLBACK_URL;]$(variables.callback_url)"
      Write-Host "##vso[task.setvariable variable=ARIA_AT_STATUS_URL;]$(variables.status_url)"
      Write-Host "##vso[task.setvariable variable=ARIA_AT_CALLBACK_HEADER;]$(variables.callback_header)"
      Write-Host "##vso[task.setvariable variable=BROWSER;]$(variables.browser)"
      Write-Host "##vso[task.setvariable variable=NVDA_VERSION;]$(variables.nvda_version)"

- task: UseNode@1
  displayName: Install Node
  inputs:
    version: '20.x'
- task: GoTool@0
  displayName: Install Go
  inputs:
    version: '1.10'
- task: PowerShell@2
  displayName: Log job state QUEUED
  condition: ne(variables['status_url'], '')
  inputs:
    targetType: inline
    script: |
      $headerbits = $env:ARIA_AT_CALLBACK_HEADER -split ":\s*", 2
      $headers = @{$headerbits[0]=$headerbits[1]; "Content-Type" = "application/json"}
      $body = @{'status'='QUEUED'; 'externalLogsUrl'="$env:GITHUB_SERVER_URL/$env:GITHUB_REPOSITORY/actions/runs/$env:GITHUB_RUN_ID"} | ConvertTo-JSON
      Invoke-WebRequest $env:ARIA_AT_STATUS_URL -Headers $headers -Method 'POST' -Body $body

# Checkouts section
- checkout: self
  path: helper
- checkout: nvda-at-automation
  path: helper/nvda-at-automation
- checkout: aria-at
  path: helper/aria-at
- checkout: aria-at-automation-harness
  path: helper/aria-at-automation-harness
